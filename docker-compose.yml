version: '3.9'

services:
  produits-service:
    build:
      context: ./microservices/produits-service
    container_name: produits-service
    volumes:
      - ./microservices/produits-service/app:/app/app
    ports:
      - "8010:8000"
    restart: always

  # produits-service-2:
  #   build:
  #     context: ./microservices/produits-service
  #   container_name: produits-service-2
  #   volumes:
  #     - ./microservices/produits-service/app:/app/app
  #   ports:
  #     - "8017:8000"
  #   restart: always

  stock-service:
    build:
      context: ./microservices/stock-service
    container_name: stock-service
    volumes:
      - ./microservices/stock-service/app:/app/app
    ports:
      - "8011:8000"
    restart: always

  client-service:
    build:
      context: ./microservices/client-service
    container_name: client-service
    volumes:
      - ./microservices/client-service/app:/app/app
    ports:
      - "8012:8000"
    restart: always

  commande-service:
    build:
      context: ./microservices/commande-service
    container_name: commande-service
    volumes:
      - ./microservices/commande-service/app:/app/app
    ports:
      - "8013:8000"
    restart: always

  panier-service:
    build:
      context: ./microservices/panier-service
    container_name: panier-service
    volumes:
      - ./microservices/panier-service/app:/app/app
    ports:
      - "8014:8000"
    restart: always

  paiement-service:
    build:
      context: ./microservices/paiement-service
    container_name: paiement-service
    volumes:
      - ./microservices/paiement-service/app:/app/app
    ports:
      - "8015:8000"
    restart: always

  centrelogistique-service:
    build:
      context: ./microservices/centrelogistique-service
    container_name: centrelogistique-service
    volumes:
      - ./microservices/centrelogistique-service/app:/app/app
    ports:
      - "8016:8000"
    restart: always

  orchestrateur-service:
    build:
      context: ./microservices/orchestrateur-service
    container_name: orchestrateur-service
    volumes:
      - ./microservices/orchestrateur-service/app:/app/app
    ports:
      - "8018:8000"  # Choisis un port libre
    restart: always
    depends_on:
      - client-service
      - commande-service
      - stock-service
      - paiement-service
  
  audit-service:
    build:
      context: ./microservices/audit-service
    container_name: audit-service
    volumes:
      - ./microservices/audit-service:/app
    depends_on:
      - rabbitmq
    ports:
      - "9002:9002"

  notification-service:
    build:
      context: ./microservices/notification-service
    container_name: notification-service
    volumes:
      - ./microservices/notification-service:/app
    depends_on:
      - rabbitmq
    ports:
      - "9001:9001"

  event-store-api:
    build:
      context: ./microservices/event-store-service
    container_name: event-store-api
    ports:
      - "8020:8000"
    volumes:
      - ./microservices/event-store-service:/app
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
    depends_on:
      - rabbitmq

  event-store-consumer:
    build:
      context: ./microservices/event-store-service
    container_name: event-store-consumer
    volumes:
      - ./microservices/event-store-service:/app
    environment:
      - PYTHONPATH=/app
    command: ["python", "app/consumer.py"]
    depends_on:
      - rabbitmq
    ports:
      - "9003:9003"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"    # Port AMQP pour les services
      - "15672:15672"  # Interface Web
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - default

  kong:
    image: kong:3.6
    container_name: kong
    ports:
      - "8000:8000"   # Port public (clients)
      - "8001:8001"   # Admin API (facultatif)
    environment:
      KONG_DATABASE: "off"                        # Mode DB-less
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml     # Chemin vers la config
    volumes:
      - ./kong.yml:/kong/kong.yml:ro

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - default

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - default
volumes:
  grafana-storage:
